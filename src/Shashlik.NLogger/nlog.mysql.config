<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="info"
      internalLogFile="nlog/internal-nlog.txt">
  <extensions>
    <add assembly="Guc.NLogger" />
    <add assembly="NLog.Web.AspNetCore"/>
  </extensions>
  <targets  async="true">
    <!--<default-wrapper xsi:type="BufferingWrapper" bufferSize="100"/>-->

    <target
      xsi:type="Database"
      name="error">
      <connectionString>${var:logconn}</connectionString>
      <dbProvider>MySql.Data.MySqlClient.MySqlConnection, MySqlConnector</dbProvider>
      <commandText>
        insert into `ErrorLogs`(
        `User`,
        `ClientId`,
        `LogTime`,
        `Level`,
        `Message`,
        `Logger`,
        `Exception`,
        `ClientIp`,
        `Method`,
        `RequestUrl`,
        `RequestBody`,
        `RequestQueryString`,
        `RequestFormData`
        ) values (
        @User,
        @ClientId,
        now(),
        @Level,
        @Message,
        @Logger,
        @Exception,
        @ClientIp,
        @Method,
        @RequestUrl,
        @RequestBody,
        @RequestQueryString,
        @RequestFormData
        );
      </commandText >
      <parameter name="@User"               layout="${aspnet-user-identity}" />
      <parameter name="@ClientId"                layout="${aspnet-request-clientid}" />
      <parameter name="@Level"               layout="${level}" />
      <parameter name="@Message"             layout="${message}" />
      <parameter name="@Logger"     layout="${logger}" />
      <parameter name="@Exception"        layout="${exception:format=toString,Data:maxInnerExceptionLevel=10}" />
      <parameter name="@ClientIp"  layout="${aspnet-request-ip}" />
      <parameter name="@Method"             layout="${aspnet-request-method}" />
      <parameter name="@RequestUrl"           layout="${aspnet-request-url:IncludePort=true:IncludeQueryString=true}" />
      <parameter name="@RequestBody"               layout="${aspnet-request-body}" />
      <parameter name="@RequestQueryString"         layout="${aspnet-request-querystring}" />
      <parameter name="@RequestFormData"              layout="${aspnet-request-form-custom}" />
    </target>

    <target xsi:type="Database" name="login">
      <connectionString>${var:logconn}</connectionString>
      <dbProvider>MySql.Data.MySqlClient.MySqlConnection, MySqlConnector</dbProvider>
      <commandText>
        insert into `LoginLogs`(
        `User`,
        `ClientId`,
        `LogTime`,
        `Level`,
        `Message`,
        `Logger`,
        `ClientIp`
        ) values (
        @User,
        @ClientId,
        now(),
        @Level,
        @Message,
        @Logger,
        @ClientIp
        );
      </commandText >
      <parameter name="@User"               layout="${aspnet-user-identity}" />
      <parameter name="@ClientId"                layout="${aspnet-request-clientid}" />
      <parameter name="@Level"               layout="${level}" />
      <parameter name="@Message"             layout="${message}" />
      <parameter name="@Logger"     layout="${logger}" />
      <parameter name="@ClientIp"  layout="${aspnet-request-ip}" />
    </target>

    <target
      xsi:type="Database"
      name="request">
      <connectionString>${var:logconn}</connectionString>
      <dbProvider>MySql.Data.MySqlClient.MySqlConnection, MySqlConnector</dbProvider>
      <commandText>
        insert into `RequestLogs`(
        `User`,
        `ClientId`,
        `LogTime`,
        `Level`,
        `Message`,
        `Logger`,
        `Exception`,
        `ClientIp`,
        `Method`,
        `RequestUrl`,
        `RequestBody`,
        `RequestQueryString`,
        `RequestFormData`
        ) values (
        @User,
        @ClientId,
        now(),
        @Level,
        @Message,
        @Logger,
        @Exception,
        @ClientIp,
        @Method,
        @RequestUrl,
        @RequestBody,
        @RequestQueryString,
        @RequestFormData
        );
      </commandText >
      <parameter name="@User"               layout="${aspnet-user-identity}" />
      <parameter name="@ClientId"                layout="${aspnet-request-clientid}" />
      <parameter name="@Level"               layout="${level}" />
      <parameter name="@Message"             layout="${message}" />
      <parameter name="@Logger"     layout="${logger}" />
      <parameter name="@Exception"        layout="${exception:format=toString,Data:maxInnerExceptionLevel=10}" />
      <parameter name="@ClientIp"  layout="${aspnet-request-ip}" />
      <parameter name="@Method"             layout="${aspnet-request-method}" />
      <parameter name="@RequestUrl"           layout="${aspnet-request-url:IncludePort=true:IncludeQueryString=true}" />
      <parameter name="@RequestBody"               layout="${aspnet-request-body}" />
      <parameter name="@RequestQueryString"         layout="${aspnet-request-querystring}" />
      <parameter name="@RequestFormData"              layout="${aspnet-request-form-custom}" />
    </target>

    <target
      xsi:type="Database"
      name="operation">
      <connectionString>${var:logconn}</connectionString>
      <dbProvider>MySql.Data.MySqlClient.MySqlConnection, MySqlConnector</dbProvider>
      <commandText>
        insert into `OperationLogs`(
        `User`,
        `ClientId`,
        `LogTime`,
        `Level`,
        `Message`,
        `Logger`,
        `ClientIp`,
        `Method`,
        `RequestUrl`,
        `RequestBody`,
        `RequestQueryString`,
        `RequestFormData`
        ) values (
        @User,
        @ClientId,
        now(),
        @Level,
        @Message,
        @Logger,
        @ClientIp,
        @Method,
        @RequestUrl,
        @RequestBody,
        @RequestQueryString,
        @RequestFormData
        );
      </commandText >
      <parameter name="@User"               layout="${aspnet-user-identity}" />
      <parameter name="@ClientId"                layout="${aspnet-request-clientid}" />
      <parameter name="@Level"               layout="${level}" />
      <parameter name="@Message"             layout="${message}" />
      <parameter name="@Logger"     layout="${logger}" />
      <parameter name="@ClientIp"  layout="${aspnet-request-ip}" />
      <parameter name="@Method"             layout="${aspnet-request-method}" />
      <parameter name="@RequestUrl"           layout="${aspnet-request-url:IncludePort=true:IncludeQueryString=true}" />
      <parameter name="@RequestBody"               layout="${aspnet-request-body}" />
      <parameter name="@RequestQueryString"         layout="${aspnet-request-querystring}" />
      <parameter name="@RequestFormData"              layout="${aspnet-request-form-custom}" />
    </target>

    <target xsi:type="WebService"
            name="http"
            url="${Url}"
            encoding="utf-8"
            protocol="${Method}">
      ${OtherArgsStr}
      <parameter name='${LogContentArgName}' type='System.String' layout='
${newline}#  日志内容:
${newline}
${newline}```javascript
${newline}user:${aspnet-user-identity}
${newline}```
${newline}
${newline}```javascript
${newline}logger:${logger}
${newline}```
${newline}
${newline}
${newline}```javascript
${newline}message:${message}
${newline}```
${newline}
${newline}
${newline}```javascript
${newline}level:${level}
${newline}```
${newline}
${newline}```javascript
${newline}exception:${exception:format=toString,Data:maxInnerExceptionLevel=10}
${newline}```
${newline}
${newline}```javascript
${newline}ClientIp:${aspnet-request-ip}
${newline}```
${newline}
${newline}```javascript
${newline}Method:${aspnet-request-method}
${newline}```
${newline}
${newline}```javascript
${newline}RequestUrl:${aspnet-request-url:IncludePort=true:IncludeQueryString=true}
${newline}```
${newline}
${newline}```javascript
${newline}RequestBody:${aspnet-request-body}
${newline}```
${newline}
${newline}```javascript
${newline}RequestQueryString:${aspnet-request-querystring}
${newline}```
${newline}
${newline}```javascript
${newline}RequestFormData:${aspnet-request-form-custom}
${newline}```
${newline}
'/>
    </target>
  </targets>

  <rules>
    <logger name="Guc.NLogger.Loggers.LoginLogs" minlevel="Info" writeTo="login" />
    <logger name="Guc.NLogger.Loggers.RequestLogs" minlevel="Info" writeTo="request" />
    <logger name="Guc.NLogger.Loggers.OperationLogs" minlevel="Info" writeTo="operation" />
    <logger name="*" minlevel="Warn" writeTo="error" >
      <filters>
        <when condition="equals(logger, 'Guc.NLogger.Loggers.LoginLogs')" action="Ignore" />
        <when condition="equals(logger, 'Guc.NLogger.Loggers.RequestLogs')" action="Ignore" />
        <when condition="equals(logger, 'Guc.NLogger.Loggers.OperationLogs')" action="Ignore" />
        <!--会和Microsoft.AspNetCore.Server.Kestrel重复,忽略该类型日志-->
        <when condition="contains(logger, '.Startup')" action="Ignore" />
        <when condition="equals(logger, 'IdentityServer4.Validation.TokenRequestValidator')" action="Ignore" />
        <when condition="equals(logger, 'IdentityServer4.Hosting.CorsPolicyProvider')" action="Ignore" />
      </filters>
    </logger>
    <logger name="*" minlevel="${Level}" writeTo="http" enable="${Enabled}">
      <filters>
        <when condition="equals(logger, 'Guc.NLogger.Loggers.LoginLogs')" action="Ignore" />
        <when condition="equals(logger, 'Guc.NLogger.Loggers.RequestLogs')" action="Ignore" />
        <when condition="equals(logger, 'Guc.NLogger.Loggers.OperationLogs')" action="Ignore" />
        <!--会和Microsoft.AspNetCore.Server.Kestrel重复,忽略该类型日志-->
        <when condition="contains(logger, '.Startup')" action="Ignore" />
        <when condition="equals(logger, 'IdentityServer4.Validation.TokenRequestValidator')" action="Ignore" />
        <when condition="equals(logger, 'IdentityServer4.Hosting.CorsPolicyProvider')" action="Ignore" />
      </filters>
    </logger>
  </rules>
</nlog>